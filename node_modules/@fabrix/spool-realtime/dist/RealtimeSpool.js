"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@fabrix/fabrix/dist/common");
const Primus = require("primus");
const primusDefaults = {
    transformer: 'engine.io'
};
const config = require("./config/index");
const pkg = require("../package.json");
class RealtimeSpool extends common_1.Spool {
    constructor(app) {
        super(app, {
            config: config,
            pkg: pkg,
            api: {}
        });
        this.extensions = {
            sockets: {
                get: () => {
                    return this.sockets;
                },
                set: (newValue) => {
                    throw new Error('sockets can not be set through FabrixApp, check spool-realtime instead');
                },
                enumerable: true,
                configurable: true
            }
        };
        return this;
    }
    get sockets() {
        return this._sockets;
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.app.once('webserver:http:ready', (httpServer) => {
                    if (Array.isArray(httpServer)) {
                        httpServer = httpServer[0];
                    }
                    const primusConfig = this.app.config.get('realtime.primus');
                    this._sockets = new Primus(httpServer, Object.assign(primusDefaults, primusConfig.options));
                    return resolve();
                });
            });
        });
    }
}
exports.RealtimeSpool = RealtimeSpool;
