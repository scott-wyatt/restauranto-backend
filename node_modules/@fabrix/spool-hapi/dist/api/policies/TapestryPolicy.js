"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const Boom = require("boom");
const common_1 = require("@fabrix/fabrix/dist/common");
class TapestryPolicy extends common_1.FabrixPolicy {
    create(request, reply) {
        this.log.debug('[TapestryPolicy] (create)');
        if (!_.isPlainObject(request.payload) && !_.isArray(request.payload)) {
            return reply(Boom.preconditionFailed(this.__('errors.tapestries.payload')));
        }
        reply();
    }
    find(request, reply) {
        const criteria = this.app.packs.hapi.getCriteriaFromQuery(request.query);
        if (request.params.id && !_.isEmpty(criteria)) {
            return reply(Boom.preconditionFailed(this.__('errors.tapestries.find.mutex')));
        }
        reply();
    }
    update(request, reply) {
        if (request.params.id && !_.isEmpty(request.query)) {
            return reply(Boom.preconditionFailed(this.__('errors.tapestries.update.mutex')));
        }
        reply();
    }
    destroy(request, reply) {
        if (request.params.id && !_.isEmpty(request.query)) {
            return reply(Boom.preconditionFailed(this.__('errors.tapestries.destroy.mutex')));
        }
        reply();
    }
    createAssociation(request, reply) {
        if (!_.isPlainObject(request.payload)) {
            return reply(Boom.preconditionFailed(this.__('errors.tapestries.payload')));
        }
        reply();
    }
    findAssociation(request, reply) {
        if (request.params.childId && !_.isEmpty(request.query)) {
            return reply(Boom.preconditionFailed(this.__('errors.tapestries.find.mutex')));
        }
        reply();
    }
    updateAssociation(request, reply) {
        if (request.params.childId && !_.isEmpty(request.query)) {
            return reply(Boom.preconditionFailed(this.__('errors.tapestries.update.mutex')));
        }
        reply();
    }
    destroyAssociation(request, reply) {
        if (request.params.childId && !_.isEmpty(request.query)) {
            return reply(Boom.preconditionFailed(this.__('errors.tapestries.destroy.mutex')));
        }
        reply();
    }
}
exports.TapestryPolicy = TapestryPolicy;
