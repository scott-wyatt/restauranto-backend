"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const common_1 = require("@fabrix/fabrix/dist/common");
const stripTags = require("striptags");
class Email extends common_1.FabrixGeneric {
    constructor(app) {
        if (!(app instanceof events_1.EventEmitter)) {
            throw new Error('The "app" argument must be of type EventEmitter');
        }
        super(app);
        Object.defineProperties(this, {
            immutable: {
                enumerable: false,
                value: false,
                writable: true
            },
            freeze: {
                enumerable: false,
                value: function () {
                    this.immutable = true;
                },
                writable: true
            },
            unfreeze: {
                enumerable: false,
                value: function () {
                    this.immutable = false;
                },
                writable: true
            },
            compose: {
                enumerable: false,
                value: function (method, subject, data, send) {
                    return Promise.resolve()
                        .then(() => {
                        if (!this.app.templates[this.name] && !this.app.templates[this.name][method]) {
                            throw new Error(`Template ${this.name}.${method} not found`);
                        }
                        const html = this.app.templates[this.name][method](data);
                        return {
                            subject: subject,
                            html: html,
                            text: stripTags(html),
                            type: `${this.name}.${method}`,
                            send_email: send || true
                        };
                    });
                },
                writable: true
            }
        });
        this.app.emit(`controller:${this.id}:constructed`, this);
    }
    get __() {
        if (this.app.__) {
            return this.app.__;
        }
        else {
            throw new Error('Missing spool-i18n, make sure it is included in app.main.spools');
        }
    }
    get id() {
        return this.constructor.name.replace(/(\w+)Email/, '$1').toLowerCase();
    }
    get name() {
        return this.constructor.name;
    }
    get emails() {
        const notAllowed = ['compose', 'freeze', 'unfreeze'];
        const emails = [];
        if (this.methods) {
            this.methods.forEach(method => {
                if (notAllowed.indexOf(method) === -1) {
                    emails.push(`${this.name}.${method}`);
                }
            });
        }
        return emails;
    }
}
exports.Email = Email;
