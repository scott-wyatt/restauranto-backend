"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const sequelizeStream = require("sequelize-stream");
exports.Events = {
    configure: (app) => {
        return;
    },
    streamSequelize: (app) => {
        const stream = sequelizeStream(app.models['Event'].sequelize);
        const METHODS = {
            'create': 'created',
            'update': 'updated',
            'destroy': 'destroyed'
        };
        stream.on('data', (instance, event) => {
            if (instance && instance.$modelOptions && instance.$modelOptions.tableName !== 'event') {
                const object = instance.$modelOptions.tableName;
                const data = instance.toJSON();
                const newEvent = {
                    object: object,
                    object_id: data.id,
                    type: `${object}.${METHODS[event]}`,
                    data: data
                };
                app.services.EventsService.publish(newEvent.type, newEvent, { save: instance.$modelOptions.autoSave });
            }
        });
    },
    cancelPubSub: (app) => {
        app.pubSub.clearAllSubscriptions();
        return Promise.resolve();
    },
    copyDefaults: (app) => {
        app.config.set('eventsDefaults', lodash_1.clone(app.config.get('events')));
        return Promise.resolve({});
    },
    addEvents: (app) => {
        Object.keys(app.events || {}).forEach(function (key) {
            const event = app.events[key];
            if (event.methods && event.methods.indexOf('subscribe') > -1
                && app.config.get('events.auto_subscribe') !== false) {
                event.subscribe();
                app.log.debug(`Engine auto subscribed ${event.name}: ${event.subscribers.length} subscribers`);
            }
            const profile = app.config.get('events.profile');
            if (app.config.get('events.profiles')
                && app.config.get('events.profiles')[profile]) {
                app.config.get('events.profiles')[profile].forEach(allowed => {
                    const allowedEvent = allowed.split('.')[0];
                    const allowedMethod = allowed.split('.')[1];
                    if (allowedEvent === key
                        && allowedMethod
                        && event.methods.indexOf(allowedMethod) > -1) {
                        app.services.EventsService.subscribe(allowed, allowedMethod, event[allowedMethod]);
                    }
                });
            }
        });
        return;
    }
};
