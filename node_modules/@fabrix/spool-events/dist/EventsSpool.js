"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const extension_1 = require("@fabrix/fabrix/dist/common/spools/extension");
const pubSub = require('./pubSub');
const Events_1 = require("./Events");
const validator_1 = require("./validator");
const config = require("./config/index");
const pkg = require("../package.json");
const api = require("./api/index");
class EventsSpool extends extension_1.ExtensionSpool {
    constructor(app) {
        super(app, {
            config: config,
            pkg: pkg,
            api: api
        });
        this._pubSub = pubSub;
        this.extensions = {
            pubSub: {
                get: () => {
                    return this.pubSub;
                },
                set: (newPubSub) => {
                    throw new Error('pubSub can not be set through FabrixApp, check spool-events instead');
                },
                enumerable: true,
                configurable: true
            }
        };
    }
    get pubSub() {
        return this._pubSub;
    }
    validate() {
        return __awaiter(this, void 0, void 0, function* () {
            const requiredSpools = ['express', 'sequelize', 'router'];
            const spools = Object.keys(this.app.spools);
            if (!spools.some(v => requiredSpools.indexOf(v) >= 0)) {
                return Promise.reject(new Error(`spool-events requires spools: ${requiredSpools.join(', ')}!`));
            }
            if (!this.app.config.get('events')) {
                return Promise.reject(new Error('No configuration found at config.events!'));
            }
            return Promise.all([
                validator_1.Validator.validateEventsConfig(this.app.config.get('events'))
            ])
                .catch(err => {
                return Promise.reject(err);
            });
        });
    }
    configure() {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.all([
                Events_1.Events.configure(this.app),
                Events_1.Events.copyDefaults(this.app)
            ]);
        });
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.all([
                Events_1.Events.addEvents(this.app)
            ]);
        });
    }
    unload() {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.all([
                Events_1.Events.cancelPubSub(this.app)
            ]);
        });
    }
}
exports.EventsSpool = EventsSpool;
