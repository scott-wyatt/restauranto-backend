"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@fabrix/fabrix/dist/common");
const notifications_1 = require("./notifications");
const validator_1 = require("./validator");
const config = require("./config/index");
const pkg = require("../package.json");
const api = require("./api/index");
class NotificationsSpool extends common_1.Spool {
    constructor(app) {
        super(app, {
            config: config,
            pkg: pkg,
            api: api
        });
    }
    validate() {
        return __awaiter(this, void 0, void 0, function* () {
            const requiredSpools = ['express', 'sequelize', 'passport', 'permissions'];
            const spools = Object.keys(this.app.spools);
            if (!spools.some(v => requiredSpools.indexOf(v) >= 0)) {
                return Promise.reject(new Error(`spool-notifications requires spools: ${requiredSpools.join(', ')}!`));
            }
            if (!this.app.config.get('notifications')) {
                return Promise.reject(new Error('No configuration found at config.notifications!'));
            }
            if (!this.app.config.get('generics')) {
                return Promise.reject(new Error('No configuration found at config.generics!'));
            }
            if (!this.app.config.get('generics.email_provider')) {
                return Promise.reject(new Error('No configuration found at config.generics.email_provider!'));
            }
            if (!this.app.config.get('generics.email_provider.config')) {
                return Promise.reject(new Error('No configuration found at config.generics.email_provider.config!'));
            }
            if (!this.app.config.get('generics.email_provider.config.protocol')) {
                return Promise.reject(new Error('No configuration found at config.generics.email_provider.config.protocol!'));
            }
            if (!this.app.config.get('generics.email_provider.config.host')) {
                return Promise.reject(new Error('No configuration found at config.generics.email_provider.options.host!'));
            }
            if (!this.app.config.get('generics.render_service')) {
                this.app.log.warn('config.generics.render_service is not set, notifications will load generics-render');
            }
            return Promise.all([
                validator_1.Validator.validateNotifications.config(this.app.config.get('notifications'))
            ]);
        });
    }
    configure() {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.all([
                notifications_1.Notifications.resolveGenerics(this.app)
            ]);
        });
    }
    sanity() {
        if (!this.app.config.get('generics.render_service.adapter')) {
            throw new Error('config.generics.render_service was not set or was unset incorrectly');
        }
    }
}
exports.NotificationsSpool = NotificationsSpool;
