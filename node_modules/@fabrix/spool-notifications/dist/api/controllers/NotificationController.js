"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@fabrix/fabrix/dist/common");
const errors_1 = require("@fabrix/spool-sequelize/dist/errors");
class NotificationController extends common_1.FabrixController {
    findById(req, res) {
        const orm = this.app.models;
        const Notification = orm['Notification'];
        if (!req.params.id) {
            const err = new Error('Notification missing identifier');
            return res.serverError(err);
        }
        Notification.findByIdDefault(req.params.id, {})
            .then(notification => {
            if (!notification) {
                throw new errors_1.ModelError('E_NOT_FOUND', `Notification id ${req.params.id} not found`);
            }
            return this.app.services.PermissionsService.sanitizeResult(req, notification);
        })
            .then(result => {
            return res.json(result);
        })
            .catch(err => {
            return res.serverError(err);
        });
    }
    findByToken(req, res) {
        const orm = this.app.models;
        const Notification = orm['Notification'];
        if (!req.params.token) {
            const err = new Error('Notification missing identifier');
            return res.serverError(err);
        }
        Notification.findByTokenDefault(req.params.token)
            .then(notification => {
            if (!notification) {
                throw new errors_1.ModelError('E_NOT_FOUND', `Notification token ${req.params.token} not found`);
            }
            return this.app.services.PermissionsService.sanitizeResult(req, notification);
        })
            .then(result => {
            return res.json(result);
        })
            .catch(err => {
            return res.serverError(err);
        });
    }
    resolve(req, res) {
        const orm = this.app.models;
        const Notification = orm['Notification'];
        if (!req.params.notification) {
            const err = new Error('Notification missing identifier');
            return res.serverError(err);
        }
        Notification.resolve(req.params.notification)
            .then(notification => {
            if (!notification) {
                throw new errors_1.ModelError('E_NOT_FOUND', `Notification ${req.params.notification} not found`);
            }
            return this.app.services.PermissionsService.sanitizeResult(req, notification);
        })
            .then(result => {
            return res.json(result);
        })
            .catch(err => {
            return res.serverError(err);
        });
    }
    findAll(req, res) {
        const orm = this.app.models;
        const Notification = orm['Notification'];
        const limit = Math.max(0, req.query.limit || 10);
        const offset = Math.max(0, req.query.offset || 0);
        const sort = req.query.sort || [['created_at', 'DESC']];
        const where = req.jsonCriteria(req.query.where);
        Notification.findAndCountDefault({
            where: where,
            order: sort,
            offset: offset,
            limit: limit
        })
            .then(notifications => {
            res.paginate(notifications.count, limit, offset, sort);
            return this.app.services.PermissionsService.sanitizeResult(req, notifications.rows);
        })
            .then(result => {
            return res.json(result);
        })
            .catch(err => {
            return res.serverError(err);
        });
    }
    userNotifications(req, res) {
        const Notification = this.app.models['Notification'];
        const limit = Math.max(0, req.query.limit || 10);
        const offset = Math.max(0, req.query.offset || 0);
        const sort = req.query.sort || [['created_at', 'DESC']];
        if (!req.user && !req.params.id) {
            const err = new Error('A user in session is required');
            return res.status(401).send(err);
        }
        let id = req.params.id;
        if (!id && req.user) {
            id = req.user.id;
        }
        if (!id) {
            const err = new Error('A user in session or an id is required');
            return res.status(401).send(err);
        }
        Notification.findAndCountDefault({
            include: [
                {
                    model: this.app.models['User'].resolver.sequelizeModel,
                    as: 'users',
                    where: {
                        id: id
                    }
                }
            ],
            order: sort,
            offset: offset,
        })
            .then(notifications => {
            res.paginate(notifications.count, limit, offset, sort);
            return this.app.services.PermissionsService.sanitizeResult(req, notifications.rows);
        })
            .then(result => {
            return res.json(result);
        })
            .catch(err => {
            return res.serverError(err);
        });
    }
    registerOpen(req, res) {
        const NotificationService = this.app.services.NotificationService;
        const user = req.params.id;
        if (!req.params.notification) {
            const err = new Error('Notification missing identifier');
            return res.serverError(err);
        }
        if (user) {
            req.user = user;
        }
        NotificationService.registerOpen(req.params.notification, { req: req })
            .then(result => {
            return res.json(result);
        })
            .catch(err => {
            return res.serverError(err);
        });
    }
    registerClick(req, res) {
        const NotificationService = this.app.services.NotificationService;
        const user = req.params.id;
        if (!req.params.notification) {
            const err = new Error('Notification missing identifier');
            return res.serverError(err);
        }
        if (user) {
            req.user = user;
        }
        NotificationService.registerClick(req.params.notification, { req: req })
            .then(result => {
            return res.json(result);
        })
            .catch(err => {
            return res.serverError(err);
        });
    }
}
exports.NotificationController = NotificationController;
