"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@fabrix/fabrix/dist/common");
const errors_1 = require("@fabrix/spool-sequelize/dist/errors");
class NotificationService extends common_1.FabrixService {
    create(notification, users = [], options = {}) {
        const Notification = this.app.models['Notification'];
        const User = this.app.models['User'];
        let resNotification;
        return Notification.createDefault(notification, options)
            .then(createdNotification => {
            if (!createdNotification) {
                throw new Error('Notification was not created');
            }
            resNotification = createdNotification;
            return Notification.resolver.sequelizeModel.sequelize.Promise.mapSeries(users, user => {
                return User.resolve(user, { transaction: options.transaction || null });
            });
        })
            .then((_users = []) => {
            return resNotification.setUsers(_users.map(u => u.id), { transaction: options.transaction || null });
        })
            .then(() => {
            return resNotification.send({ transaction: options.transaction });
        });
    }
    sendNotification(notification, options = {}) {
        const Notification = this.app.models['Notification'];
        let resNotification;
        return Notification.resolve(notification, options)
            .then(_notification => {
            if (!_notification) {
                throw new errors_1.ModelError('E_NOT_FOUND', `Notification ${notification} not found`);
            }
            resNotification = _notification;
            return resNotification.send({ transaction: options.transaction || null });
        });
    }
    registerClick(notification, options = {}) {
        const Notification = this.app.models['Notification'];
        const user = options.req && options.req.user ? options.req.user : null;
        let resNotification;
        return Notification.resolve(notification, options)
            .then(_notification => {
            if (!_notification) {
                throw new errors_1.ModelError('E_NOT_FOUND', `Notification ${notification} not found`);
            }
            resNotification = _notification;
            return resNotification.click(user, { transaction: options.transaction || null });
        })
            .then(() => {
            return resNotification.save({ transaction: options.transaction || null });
        });
    }
    registerOpen(notification, options = {}) {
        const Notification = this.app.models['Notification'];
        const user = options.req && options.req.user ? options.req.user : null;
        let resNotification;
        return Notification.resolve(notification, options)
            .then(_notification => {
            if (!_notification) {
                throw new errors_1.ModelError('E_NOT_FOUND', `Notification ${notification} not found`);
            }
            resNotification = _notification;
            return resNotification.open(user, { transaction: options.transaction || null });
        })
            .then(() => {
            return resNotification.save({ transaction: options.transaction || null });
        });
    }
    afterCreate(notification, options = {}) {
        return Promise.resolve(notification);
    }
}
exports.NotificationService = NotificationService;
