import { FabrixModel as Model } from '@fabrix/fabrix/dist/common';
import { SequelizeResolver } from '@fabrix/spool-sequelize';
export declare class NotificationResolver extends SequelizeResolver {
    findByIdDefault(id: any, options?: {}): any;
    findByTokenDefault(token: any, options?: {}): any;
    findOneDefault(options?: {}): any;
    findAllDefault(options?: {}): any;
    findAndCountDefault(options?: {}): any;
    createDefault(notification: any, options?: {
        [key: string]: any;
    }): any;
    resolveByInstance(notification: any, options?: {
        [key: string]: any;
    }): Promise<any>;
    resolveById(notification: any, options?: {
        [key: string]: any;
    }): any;
    resolveByToken(notification: any, options?: {
        [key: string]: any;
    }): any;
    resolveByNumber(notification: any, options?: {
        [key: string]: any;
    }): any;
    resolveByString(notification: any, options?: {
        [key: string]: any;
    }): any;
    resolve(notification: any, options?: {
        [key: string]: any;
    }): any;
}
export declare class Notification extends Model {
    static config(app: any, Sequelize: any): {
        options: {
            underscored: boolean;
            enums: {
                PROTOCOLS: {
                    HTTPS: string;
                    HTTP: string;
                };
            };
            hooks: {
                beforeCreate: (notification: any, options: any) => void;
                afterCreate: (notification: any, options: any) => any;
            };
            classMethods: {};
        };
    };
    static schema(app: any, Sequelize: any): {
        token: {
            type: any;
            unique: boolean;
        };
        protocol: {
            type: any;
            values: any;
            defaultValue: any;
        };
        host: {
            type: any;
            defaultValue: any;
        };
        reply_to: {
            type: any;
            defaultValue: any;
        };
        type: {
            type: any;
            allowNull: boolean;
        };
        subject: {
            type: any;
        };
        template_name: {
            type: any;
        };
        template_content: {
            type: any;
            defaultValue: {};
        };
        text: {
            type: any;
            allowNull: boolean;
        };
        html: {
            type: any;
        };
        total_opens: {
            type: any;
            defaultValue: number;
        };
        total_clicks: {
            type: any;
            defaultValue: number;
        };
        send_email: {
            type: any;
            defaultValue: boolean;
        };
        sent: {
            type: any;
            defaultValue: boolean;
        };
        sent_at: {
            type: any;
        };
    };
    static readonly resolver: typeof NotificationResolver;
    static associate(models: any): void;
}
export interface Notification {
    setSent(options: any): any;
    send(options: any): any;
    click(user: any, options: any): any;
    open(user: any, options: any): any;
    userOpened(user: any, options: any): any;
    resolveUsers(options: any): any;
    resolveEmailUsers(options: any): any;
}
