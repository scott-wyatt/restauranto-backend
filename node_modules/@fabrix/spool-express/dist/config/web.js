"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bodyParser = require("body-parser");
const cookieParser = require("cookie-parser");
const methodOverride = require("method-override");
const compression = require("compression");
exports.web = {
    init: (app, expressApp) => {
        return true;
    },
    middlewares: {
        compression: compression(),
        methodOverride: methodOverride('_method'),
        cookieParser: cookieParser(),
        '404': (req, res, next) => {
            res.status(404);
            const accept = req.get('accept') || '';
            if (accept.indexOf('html') !== -1 && req.app.get('view engine') && !req.wantsJSON) {
                res.render('404', {
                    url: req.url,
                    error: req.error
                }, (err, html) => {
                    if (err) {
                        req.log.error('Error sending page 404, maybe you don\'t have a 404.html file', err);
                        res.type('txt').send('Resource not found');
                    }
                    else {
                        res.send(html);
                    }
                });
            }
            else if (req.wantsJSON) {
                if (req.error) {
                    res.json(typeof req.error === 'object' ? req.error : {
                        error: 'Not found'
                    });
                }
                else {
                    res.json({
                        error: 'Not found'
                    });
                }
            }
            else {
                res.type('txt').send('Not found');
            }
        },
        '500': (error, req, res, next) => {
            if (error && error.statusCode) {
                res.status(error.statusCode);
                req.log.error(error);
                const accept = req.get('accept') || '';
                if (accept.indexOf('html') !== -1 && req.app.get('view engine') && !req.wantsJSON) {
                    res.render(error.statusCode, {
                        url: req.url,
                        error: error
                    }, (err, html) => {
                        if (err) {
                            req.log.error(`Error sending page ${error.statusCode}, maybe you don't have a ${error.statusCode}.html file`, err);
                            res.type('txt').send(error.message);
                        }
                        else {
                            res.send(html);
                        }
                    });
                }
                else if (req.wantsJSON) {
                    res.json(typeof error === 'object' ? error : {
                        error: error
                    });
                }
                else {
                    res.type('txt').send(error.message || error);
                }
            }
            else {
                res.status(500);
                error = error || 'Internal Server Error';
                req.log.error(error);
                if (req.accepts('html') && req.app.get('view engine') && !req.wantsJSON) {
                    res.render('500', {
                        url: req.url,
                        error: error
                    }, (err, html) => {
                        if (err) {
                            req.log.error('Error sending page 500, maybe you don\'t have a 500.html file', err);
                            res.type('txt').send('Internal Server Error');
                        }
                        else {
                            res.send(html);
                        }
                    });
                }
                else if (req.wantsJSON) {
                    if (typeof error === 'object') {
                        res.send(error);
                    }
                    else {
                        res.send({
                            error: error
                        });
                    }
                }
                else {
                    res.type('txt').send('Internal Server Error');
                }
            }
        },
        order: [
            'addMethods',
            'cookieParser',
            'session',
            'bodyParser',
            'compression',
            'methodOverride',
            'www',
            'router',
            '404',
            '500'
        ],
        bodyParser: [
            bodyParser.json(),
            bodyParser.urlencoded({
                extended: false
            })
        ]
    },
    cache: 31557600000,
    host: process.env.HOST || 'localhost',
    port: process.env.PORT || 3000
};
