"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const server_1 = require("@fabrix/fabrix/dist/common/spools/server");
const lodash_1 = require("lodash");
const server_2 = require("./server");
const validator_1 = require("./validator");
const config = require("./config/index");
const pkg = require("../package.json");
const api = require("./api/index");
class ExpressSpool extends server_1.ServerSpool {
    constructor(app) {
        super(app, {
            config: config,
            pkg: pkg,
            api: api
        });
    }
    validate() {
        return __awaiter(this, void 0, void 0, function* () {
            const requiredSpools = ['router', 'i18n'];
            const spools = Object.keys(this.app.spools);
            if (!spools.some(v => requiredSpools.indexOf(v) >= 0)) {
                return Promise.reject(new Error(`spool-express requires spools: ${requiredSpools.join(', ')}!`));
            }
            if (!this.app.config.get('web.express')) {
                return Promise.reject(new Error('config.web.express is absent, '
                    + 'please npm install your express version (4 or 5) and uncomment the line under config.web.express'));
            }
            return Promise.all([
                validator_1.Validator.validateWebConfig(this.app.config.get('web'))
            ])
                .catch(err => {
                return Promise.reject(err);
            });
        });
    }
    configure() {
        this.app.config.set('web.server', 'express');
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            this.server = server_2.Server.createServer(this.app);
            return Promise.all([
                server_2.Server.registerMiddlewares(this.app, this.server),
                server_2.Server.registerViews(this.app, this.server)
            ])
                .then(() => {
                return server_2.Server.start(this.app, this.server);
            })
                .then(() => {
                this.app.emit('webserver:http:ready', server_2.Server.nativeServer);
                return;
            })
                .catch(err => {
                return Promise.reject(err);
            });
        });
    }
    unload() {
        return __awaiter(this, void 0, void 0, function* () {
            if (server_2.Server.nativeServer === null) {
                return;
            }
            else if (lodash_1.isArray(server_2.Server.nativeServer)) {
                server_2.Server.nativeServer.forEach(server => {
                    server.close();
                });
            }
            else {
                server_2.Server.nativeServer.close();
            }
            return Promise.resolve();
        });
    }
    sanity() {
        if (!(this.app.routes instanceof Object)) {
            throw new Error('Sanity Failed: app.routes is not an object!');
        }
    }
}
exports.ExpressSpool = ExpressSpool;
