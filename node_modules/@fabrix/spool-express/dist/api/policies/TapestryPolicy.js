"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const Policy_1 = require("@fabrix/fabrix/dist/common/Policy");
class TapestryPolicy extends Policy_1.FabrixPolicy {
    create(req, res, next) {
        if (!lodash_1.isPlainObject(req.body) && !lodash_1.isArray(req.body)) {
            return res.boom.preconditionFailed(this.__('errors.tapestries.body'));
        }
        next();
    }
    find(req, res, next) {
        const criteria = this.app.spools.express.getCriteriaFromQuery(req.query);
        if (req.params.id && !lodash_1.isEmpty(criteria)) {
            return res.boom.preconditionFailed(this.__('errors.tapestries.find.mutex'));
        }
        next();
    }
    update(req, res, next) {
        if (req.params.id && !lodash_1.isEmpty(req.query)) {
            return res.boom.preconditionFailed(this.__('errors.tapestries.update.mutex'));
        }
        next();
    }
    destroy(req, res, next) {
        if (req.params.id && !lodash_1.isEmpty(req.query)) {
            return res.boom.preconditionFailed(this.__('errors.tapestries.destroy.mutex'));
        }
        next();
    }
    createAssociation(req, res, next) {
        if (!lodash_1.isPlainObject(req.body)) {
            return res.boom.preconditionFailed(this.__('errors.tapestries.body'));
        }
        next();
    }
    findAssociation(req, res, next) {
        const criteria = this.app.spools.express.getCriteriaFromQuery(req.query);
        if (req.params.childId && !lodash_1.isEmpty(criteria)) {
            return res.boom.preconditionFailed(this.__('errors.tapestries.find.mutex'));
        }
        next();
    }
    updateAssociation(req, res, next) {
        if (req.params.childId && !lodash_1.isEmpty(req.query)) {
            return res.boom.preconditionFailed(this.__('errors.tapestries.update.mutex'));
        }
        next();
    }
    destroyAssociation(req, res, next) {
        if (req.params.childId && !lodash_1.isEmpty(req.query)) {
            return res.boom.preconditionFailed(this.__('errors.tapestries.destroy.mutex'));
        }
        next();
    }
}
exports.TapestryPolicy = TapestryPolicy;
