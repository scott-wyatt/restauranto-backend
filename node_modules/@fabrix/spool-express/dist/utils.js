"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Controller_1 = require("@fabrix/fabrix/dist/common/Controller");
const Policy_1 = require("@fabrix/fabrix/dist/common/Policy");
const Joi = require("joi");
const methods = require("methods");
const _ = require("lodash");
exports.Utils = {
    extendsExpressRouter: (app) => {
        methods.concat('all').forEach(function (method) {
            const originalMethod = app[method];
            app[method] = function (key) {
                const args = [].slice.call(arguments);
                const config = args[1];
                if (_.isPlainObject(config)) {
                    args[1] = function (req, res, next) {
                        req.route.config = config;
                        next();
                    };
                }
                return originalMethod.apply(this, args);
            };
        });
    },
    isFabrixStandard: function (obj) {
        const className = obj.constructor.name;
        if (className === Controller_1.FabrixController.name || className === Policy_1.FabrixPolicy.name) {
            return true;
        }
        else if (className === 'Object') {
            return false;
        }
        else {
            return this.isFabrixStandard(obj.__proto__);
        }
    },
    createRequest: function (req, res) {
        return {
            raw: {
                req: req,
                res: res
            },
            params: req.params,
            payload: req.body,
            query: req.query,
            headers: req.headers,
            route: req.route,
            url: req.url
        };
    },
    createResponse: function (req, res, next) {
        const response = (data) => {
            return new Promise((resolve, reject) => {
                if (!data) {
                    next();
                }
                else if (data instanceof Error) {
                    if (!data.output) {
                        data.output = {};
                    }
                    const code = data.code || data.output.statusCode;
                    res.status(code || 500).send(data.message);
                }
                else {
                    res.send(data);
                }
                resolve();
            });
        };
        response.continue = () => {
            return new Promise((resolve, reject) => {
                next();
                resolve();
            });
        };
        response.header = (key, value) => {
            return new Promise((resolve, reject) => {
                res.set(key, value);
                resolve();
            });
        };
        return response;
    },
    createJoiValidationRules: function (route) {
        route.config.validate.body = route.config.validate.payload;
        const validation = route.config.validate;
        const types = ['headers', 'params', 'query', 'body'];
        types.forEach((type) => {
            let rule = validation[type];
            rule = (rule === false ? Joi.object({}).allow(null) :
                typeof rule === 'function' ? rule :
                    !rule || rule === true ? Joi.any() :
                        Joi.compile(rule));
            validation[type] = rule;
        });
        return validation;
    }
};
