export declare const Validator: {
    validateGenericsConfig(config: any): Promise<{}>;
    validateDataStoreProvider: {
        upload: (config: any) => Promise<{}>;
        uploadSuccess: (config: any) => Promise<{}>;
        uploadFile: (config: any) => Promise<{}>;
        uploadFileSuccess: (config: any) => Promise<{}>;
        uploadFiles: (config: any) => Promise<{}>;
        uploadFilesSuccess: (config: any) => Promise<{}>;
    };
    validateEmailProvider: {
        send: (config: any) => Promise<{}>;
        sendSuccess: (config: any) => Promise<{}>;
        sendTemplate: (config: any) => Promise<{}>;
        sendTemplateSuccess: (config: any) => Promise<{}>;
    };
    validateGeolocationProvider: {
        locate: (config: any) => Promise<{}>;
        locateSuccess: (config: any) => Promise<{}>;
    };
    validatePaymentProvider: {
        authorize: (config: any) => Promise<{}>;
        authorizeSuccess: (config: any) => Promise<{}>;
        createCustomer: (config: any) => Promise<{}>;
        createCustomerSuccess: (config: any) => Promise<{}>;
        createCustomerSource: (config: any) => Promise<{}>;
        createCustomerSourceSuccess: (config: any) => Promise<{}>;
        capture: (config: any) => Promise<{}>;
        captureSuccess: (config: any) => Promise<{}>;
        findCustomer: (config: any) => Promise<{}>;
        findCustomerSuccess: (config: any) => Promise<{}>;
        findCustomerSource: (config: any) => Promise<{}>;
        findCustomerSourceSuccess: (config: any) => Promise<{}>;
        getCustomerSources: (config: any) => Promise<{}>;
        getCustomerSourcesSuccess: (config: any) => Promise<{}>;
        sale: (config: any) => Promise<{}>;
        saleSuccess: (config: any) => Promise<{}>;
        updateCustomer: (config: any) => Promise<{}>;
        updateCustomerSuccess: (config: any) => Promise<{}>;
        updateCustomerSource: (config: any) => Promise<{}>;
        updateCustomerSourceSuccess: (config: any) => Promise<{}>;
        removeCustomerSource: (config: any) => Promise<{}>;
        removeCustomerSourceSuccess: (config: any) => Promise<{}>;
        void: (config: any) => Promise<{}>;
        voidSuccess: (config: any) => Promise<{}>;
        refund: (config: any) => Promise<{}>;
        refundSuccess: (config: any) => Promise<{}>;
    };
    validateFulfillmentProvider: {
        createOrder: (config: any) => Promise<{}>;
        createOrders: (config: any) => Promise<{}>;
        createOrderSuccess: (config: any) => Promise<{}>;
        createOrdersSuccess: (config: any) => Promise<{}>;
        destroyOrder: (config: any) => Promise<{}>;
        destroyOrders: (config: any) => Promise<{}>;
        destroyOrderSuccess: (config: any) => Promise<{}>;
        destroyOrdersSuccess: (config: any) => Promise<{}>;
        getOrder: (config: any) => Promise<{}>;
        getOrders: (config: any) => Promise<{}>;
        getOrderSuccess: (config: any) => Promise<{}>;
        getOrdersSuccess: (config: any) => Promise<{}>;
        holdOrder: (config: any) => Promise<{}>;
        holdOrders: (config: any) => Promise<{}>;
        holdOrderSuccess: (config: any) => Promise<{}>;
        holdOrdersSuccess: (config: any) => Promise<{}>;
        updateOrder: (config: any) => Promise<{}>;
        updateOrders: (config: any) => Promise<{}>;
        updateOrderSuccess: (config: any) => Promise<{}>;
        updateOrdersSuccess: (config: any) => Promise<{}>;
    };
    validateShippingProvider: {
        validateAddress: (config: any) => Promise<{}>;
        validateAddressSuccess: (config: any) => Promise<{}>;
        getRate: (config: any) => Promise<{}>;
        getRateSuccess: (config: any) => Promise<{}>;
        getRates: (config: any) => Promise<{}>;
        getRatesSuccess: (config: any) => Promise<{}>;
    };
    validateTaxProvider: {
        getRate: (config: any) => Promise<{}>;
        getRateSuccess: (config: any) => Promise<{}>;
        taxForOrder: (config: any) => Promise<{}>;
        taxForOrderSuccess: (config: any) => Promise<{}>;
    };
    validateRenderService: {
        render: (config: any) => Promise<{}>;
        renderSuccess: (config: any) => Promise<{}>;
    };
};
