"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@fabrix/fabrix/dist/common");
const validator_1 = require("../../validator");
class PaymentGenericService extends common_1.FabrixService {
    _init(generic) {
        const Adapter = generic ? generic.adapter : this.app.config.get('generics.payment_processor.adapter');
        return new Adapter(this.app, generic ? generic.config : this.app.config.get('generics.payment_processor.config'));
    }
    authorize(transaction, adapter) {
        return validator_1.Validator.validatePaymentProvider.authorize(transaction)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.authorize(transaction)
                .then(_transaction => {
                return validator_1.Validator.validatePaymentProvider.authorizeSuccess(_transaction);
            });
        });
    }
    capture(transaction, adapter) {
        return validator_1.Validator.validatePaymentProvider.capture(transaction)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.capture(transaction)
                .then(_transaction => {
                return validator_1.Validator.validatePaymentProvider.captureSuccess(_transaction);
            });
        });
    }
    sale(transaction, adapter) {
        return validator_1.Validator.validatePaymentProvider.sale(transaction)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.sale(transaction)
                .then(_transaction => {
                return validator_1.Validator.validatePaymentProvider.saleSuccess(_transaction);
            });
        });
    }
    void(transaction, adapter) {
        return validator_1.Validator.validatePaymentProvider.void(transaction)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.void(transaction)
                .then(_transaction => {
                return validator_1.Validator.validatePaymentProvider.voidSuccess(_transaction);
            });
        });
    }
    refund(transaction, adapter) {
        return validator_1.Validator.validatePaymentProvider.refund(transaction)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.refund(transaction)
                .then(_transaction => {
                return validator_1.Validator.validatePaymentProvider.refundSuccess(_transaction);
            });
        });
    }
    createCustomer(customer, adapter) {
        return validator_1.Validator.validatePaymentProvider.createCustomer(customer)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.createCustomer(customer)
                .then(_customer => {
                return validator_1.Validator.validatePaymentProvider.createCustomerSuccess(_customer);
            });
        });
    }
    findCustomer(customer, adapter) {
        return validator_1.Validator.validatePaymentProvider.findCustomer(customer)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.findCustomer(customer)
                .then(_customer => {
                return validator_1.Validator.validatePaymentProvider.findCustomerSuccess(_customer);
            });
        });
    }
    updateCustomer(customer, adapter) {
        return validator_1.Validator.validatePaymentProvider.updateCustomer(customer)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.updateCustomer(customer)
                .then(_customer => {
                return validator_1.Validator.validatePaymentProvider.updateCustomerSuccess(_customer);
            });
        });
    }
    getCustomerSources(customer, adapter) {
        return validator_1.Validator.validatePaymentProvider.getCustomerSources(customer)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.getCustomerSources(customer)
                .then(_customer => {
                return validator_1.Validator.validatePaymentProvider.getCustomerSourcesSuccess(_customer);
            });
        });
    }
    createCustomerSource(source, adapter) {
        return validator_1.Validator.validatePaymentProvider.createCustomerSource(source)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.createCustomerSource(source)
                .then(_source => {
                return validator_1.Validator.validatePaymentProvider.createCustomerSourceSuccess(_source);
            });
        });
    }
    findCustomerSource(source, adapter) {
        return validator_1.Validator.validatePaymentProvider.findCustomerSource(source)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.findCustomerSource(source)
                .then(_source => {
                return validator_1.Validator.validatePaymentProvider.findCustomerSourceSuccess(_source);
            });
        });
    }
    updateCustomerSource(source, adapter) {
        return validator_1.Validator.validatePaymentProvider.updateCustomerSource(source)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.updateCustomerSource(source)
                .then(_source => {
                return validator_1.Validator.validatePaymentProvider.updateCustomerSourceSuccess(_source);
            });
        });
    }
    removeCustomerSource(source, adapter) {
        return validator_1.Validator.validatePaymentProvider.removeCustomerSource(source)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.removeCustomerSource(source)
                .then(_source => {
                return validator_1.Validator.validatePaymentProvider.removeCustomerSourceSuccess(_source);
            });
        });
    }
}
exports.PaymentGenericService = PaymentGenericService;
