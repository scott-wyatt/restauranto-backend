"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@fabrix/fabrix/dist/common");
const validator_1 = require("../../validator");
class FulfillmentGenericService extends common_1.FabrixService {
    _init(generic) {
        const Adapter = generic ? generic.adapter : this.app.config.get('generics.fulfillment_provider.adapter');
        return new Adapter(this.app, generic ? generic.config : this.app.config.get('generics.fulfillment_provider.config'));
    }
    createOrder(data, adapter) {
        return validator_1.Validator.validateFulfillmentProvider.createOrder(data)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.createOrder(data)
                .then(order => {
                return validator_1.Validator.validateFulfillmentProvider.createOrderSuccess(order);
            });
        });
    }
    createOrders(data, adapter) {
        return validator_1.Validator.validateFulfillmentProvider.createOrders(data)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.createOrders(data)
                .then(orders => {
                return validator_1.Validator.validateFulfillmentProvider.createOrdersSuccess(orders);
            });
        });
    }
    updateOrder(data, adapter) {
        return validator_1.Validator.validateFulfillmentProvider.updateOrder(data)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.updateOrder(data)
                .then(order => {
                return validator_1.Validator.validateFulfillmentProvider.updateOrderSuccess(order);
            });
        });
    }
    updateOrders(data, adapter) {
        return validator_1.Validator.validateFulfillmentProvider.updateOrders(data)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.updateOrders(data)
                .then(orders => {
                return validator_1.Validator.validateFulfillmentProvider.updateOrdersSuccess(orders);
            });
        });
    }
    destroyOrder(data, adapter) {
        return validator_1.Validator.validateFulfillmentProvider.destroyOrder(data)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.destroyOrder(data)
                .then(order => {
                return validator_1.Validator.validateFulfillmentProvider.destroyOrderSuccess(order);
            });
        });
    }
    destroyOrders(data, adapter) {
        return validator_1.Validator.validateFulfillmentProvider.destroyOrders(data)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.destroyOrders(data)
                .then(orders => {
                return validator_1.Validator.validateFulfillmentProvider.destroyOrdersSuccess(orders);
            });
        });
    }
    getOrder(data, adapter) {
        return validator_1.Validator.validateFulfillmentProvider.getOrder(data)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.getOrder(data)
                .then(order => {
                return validator_1.Validator.validateFulfillmentProvider.getOrderSuccess(order);
            });
        });
    }
    getOrders(data, adapter) {
        return validator_1.Validator.validateFulfillmentProvider.getOrders(data)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.getOrders(data)
                .then(orders => {
                return validator_1.Validator.validateFulfillmentProvider.getOrderSuccess(orders);
            });
        });
    }
    holdOrder(data, adapter) {
        return validator_1.Validator.validateFulfillmentProvider.holdOrder(data)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.holdOrder(data)
                .then(order => {
                return validator_1.Validator.validateFulfillmentProvider.holdOrderSuccess(order);
            });
        });
    }
    holdOrders(data, adapter) {
        return validator_1.Validator.validateFulfillmentProvider.holdOrders(data)
            .then(values => {
            adapter = this._init(adapter);
            return adapter.holdOrders(data)
                .then(orders => {
                return validator_1.Validator.validateFulfillmentProvider.holdOrdersSuccess(orders);
            });
        });
    }
}
exports.FulfillmentGenericService = FulfillmentGenericService;
