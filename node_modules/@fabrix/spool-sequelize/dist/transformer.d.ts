import * as Sequelize from 'sequelize';
import { FabrixApp } from '@fabrix/fabrix';
import { FabrixModel } from '@fabrix/fabrix/dist/common';
export declare const Transformer: {
    BreakException: {};
    reservedMethods: string[];
    dataTypes: {
        '^(STRING|string)': string;
        '^(STRING|string)\((\w*)\)': string;
        '(STRING.BINARY)': string;
        '^(TEXT|text)': string;
        '^(TEXT|text)\((\w*)\)': string;
        '^(INTEGER|integer|int)': string;
        '^(BIGINT)': string;
        '^(BIGINT)\((\d*)\)': string;
        '^(FLOAT)': string;
        '^(FLOAT)\((\d*)\)': string;
        '^(FLOAT)\((\d*),\s(\d*)\)': string;
        '^(REAL)': string;
        '^(REAL)\((\d*)\)': string;
        '^(REAL)\((\d*),\s(\d*)\)': string;
        '^(DOUBLE)': string;
        '^(DOUBLE)\((\d*)\)': string;
        '^(DOUBLE)\((\d*),\s(\d*)\)': string;
        '^(DECIMAL)': string;
        '^(DECIMAL)\((\d*),\s(\d*)\)': string;
        '^(DATE|date)': string;
        '^(DATE)\((\d*)\)': string;
        '^(DATEONLY)': string;
        '^(BOOLEAN)': string;
        '^(ENUM)': string;
        '^(ENUM)\((.*)?\)': string;
        '^(ARRAY)\((\w*)\)': string;
        '^(JSON|json)': string;
        '^(JSONB|jsonb)': string;
        '^(BLOB)': string;
        '^(BLOB)\((\w*)\)': string;
        '^(UUID)': string;
        '^(CIDR)': string;
        '^(INET)': string;
        '^(MACADDR)': string;
        '^(RANGE)\((\w*)\)': string;
        '^(GEOMETRY)': string;
        '^(GEOMETRY)\((\w*)\)': string;
        '^(GEOMETRY)\((\w*),\s(\d*)\)': string;
    };
    getClassMethods(obj: any): string[];
    getModelOptions: (app: FabrixApp, model: any) => any;
    getModelSchema: (app: FabrixApp, model: any) => {
        [key: string]: any;
    };
    replaceDataType: (dataType: any) => any;
    transformSchema: (schema: any) => {
        [key: string]: any;
    };
    getModelPrototypes: (model: any) => any;
    getModelMethods: (model: any, prototypes: any) => {};
    defineModel: (app: FabrixApp, model: FabrixModel, connections: any) => FabrixModel;
    createConnectionsFromConfig(app: FabrixApp, config: {
        [key: string]: any;
    }): Sequelize.Sequelize;
    pickStores(stores: any): {
        [key: string]: any;
    };
    pickModels(app: FabrixApp, connections: any): {
        [key: string]: any;
    };
    getConnections(app: FabrixApp): {};
    getModels(app: FabrixApp, connections: any): {};
    associateModels(app: FabrixApp, models: any, sequelizeModels: any): void;
};
