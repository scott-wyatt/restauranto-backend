"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const datastore_1 = require("@fabrix/fabrix/dist/common/spools/datastore");
const Sequelize = require("sequelize");
const validator_1 = require("./validator");
const transformer_1 = require("./transformer");
const config = require("./config/index");
const pkg = require("../package.json");
const api = require("./api/index");
class SequelizeSpool extends datastore_1.DatastoreSpool {
    constructor(app) {
        super(app, {
            config: config,
            pkg: pkg,
            api: api
        });
        this._datastore = Sequelize;
        this._connections = {};
        this._models = {};
    }
    get models() {
        return this._models || {};
    }
    get connections() {
        return this._connections || {};
    }
    validate() {
        return __awaiter(this, void 0, void 0, function* () {
            const requiredSpools = ['router'];
            const spools = Object.keys(this.app.spools);
            if (!spools.some(v => requiredSpools.indexOf(v) >= 0)) {
                return Promise.reject(new Error(`spool-sequelize requires spools: ${requiredSpools.join(', ')}!`));
            }
            const stores = this.app.config.get('stores');
            if (stores && Object.keys(stores).length === 0) {
                this.app.log.warn('No store configured at config.stores, models will be ignored');
            }
            return Promise.all([
                validator_1.Validator.validateStoresConfig(this.app.config.get('stores'))
            ]);
        });
    }
    configure() {
        this._connections = transformer_1.Transformer.getConnections(this.app);
        this._models = transformer_1.Transformer.getModels(this.app, this.connections);
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.migrate();
        });
    }
    unload() {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.all(Object.entries(this.connections).map(([_, store]) => store.close()));
        });
    }
    migrate() {
        return __awaiter(this, void 0, void 0, function* () {
            const SchemaMigrationService = this.app.services.SchemaMigrationService;
            return SchemaMigrationService.migrateDB(this.connections);
        });
    }
}
exports.SequelizeSpool = SequelizeSpool;
