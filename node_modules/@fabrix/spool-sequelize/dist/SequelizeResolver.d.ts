import { FabrixModel, FabrixResolver } from '@fabrix/fabrix/dist/common';
import { Sequelize } from 'sequelize';
export declare class SequelizeResolver extends FabrixResolver {
    private _connection;
    private _sequelize;
    private _sequelizeModel;
    constructor(model: FabrixModel, datastore?: Sequelize);
    connection: any;
    readonly sequelizeModel: any;
    readonly dataStoreModel: any;
    readonly sequelize: any;
    readonly datastore: any;
    readonly instance: any;
    connect(modelName: any, schema: any, options: any): void;
    readonly associations: any;
    addScope(name: any, scope: any, options?: {}): any;
    aggregate(filed: any, aggregateFunction: any, options?: {}): any;
    belongsTo(target: any, options?: {}): any;
    belongsToMany(target: any, options?: {}): any;
    build(dataValues: any, options?: {}): any;
    bulkCreate(records: any[], options?: {}): any;
    count(criteria: any, options?: {}): any;
    create(values: any, options?: {}): any;
    decrement(fields: any, options?: {}): any;
    describe(schema: any, options?: {}): any;
    delete(options?: {}): any;
    destroy(options?: {}): any;
    drop(options?: {}): any;
    findAll(options?: {}): any;
    findAndCountAll(options?: {}): any;
    findById(id: any, options?: {}): any;
    findOne(criteria: any): any;
    findOrBuild(criteria: any): any;
    findOrCreate(criteria: any): any;
    getTableName(): any;
    hasMany(arget: any, options?: {}): any;
    hasOne(target: any, options?: {}): any;
    increment(fields: any, options?: {}): any;
    init(attributes: any, options?: {}): any;
    max(criteria: any, options?: {}): any;
    min(criteria: any, options?: {}): any;
    removeAttribute(attribute: any): any;
    restore(options?: {}): any;
    scope(options?: {}): any;
    sum(riteria: any, options?: {}): any;
    sync(options?: {}): any;
    truncate(options?: {}): any;
    unscoped(): any;
    save(values: any, options?: {}): any;
    update(values: any, options?: {}): any;
    upsert(values: any, options?: {}): any;
}
