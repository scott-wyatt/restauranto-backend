"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@fabrix/fabrix/dist/common");
class SchemaMigrationService extends common_1.FabrixService {
    dropModel(model, connection) {
        return __awaiter(this, void 0, void 0, function* () {
            const dialect = connection.dialect.connectionManager.dialectName;
            return model.sequelize.query(dialect === 'sqlite' ? 'PRAGMA foreign_keys = OFF' : 'SET FOREIGN_KEY_CHECKS = 0')
                .then(() => {
                return model.sync({ force: true });
            })
                .then(() => {
                return model.sequelize.query(dialect === 'sqlite' ? 'PRAGMA foreign_keys = ON' : 'SET FOREIGN_KEY_CHECKS = 1');
            })
                .catch(err => {
                return model.sync({ force: true });
            });
        });
    }
    alterModel(model, connection) {
        return __awaiter(this, void 0, void 0, function* () {
            return model.sync();
        });
    }
    migrateModels(models, connection) {
        let promises = [];
        Object.entries(models).forEach(([_, model]) => {
            if (model.migrate === 'drop') {
                promises.push(this.dropModel(model, connection));
            }
            else if (model.migrate === 'alter') {
                promises.push(this.alterModel(model, connection));
            }
            else if (model.migrate === 'none') {
                return;
            }
            else {
                return;
            }
        });
        return promises;
    }
    dropDB(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            const dialect = connection.dialect.connectionManager.dialectName;
            return connection.query(dialect === 'sqlite' ? 'PRAGMA foreign_keys = OFF' : 'SET FOREIGN_KEY_CHECKS = 0')
                .then(() => {
                return connection.sync({ force: true });
            })
                .then(() => {
                return connection.query(dialect === 'sqlite' ? 'PRAGMA foreign_keys = ON' : 'SET FOREIGN_KEY_CHECKS = 1');
            })
                .catch(err => {
                return connection.sync({ force: true });
            });
        });
    }
    alterDB(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            return connection.sync();
        });
    }
    migrateDB(connections) {
        return __awaiter(this, void 0, void 0, function* () {
            let promises = [];
            Object.entries(connections).forEach(([_, store]) => {
                if (store.migrate === 'drop') {
                    promises.push(this.dropDB(store));
                }
                else if (store.migrate === 'alter') {
                    promises.push(this.alterDB(store));
                }
                else if (store.migrate === 'none') {
                    return;
                }
                else {
                    promises = [...promises, ...this.migrateModels(store.models, store)];
                }
            });
            return Promise.all(promises);
        });
    }
}
exports.SchemaMigrationService = SchemaMigrationService;
