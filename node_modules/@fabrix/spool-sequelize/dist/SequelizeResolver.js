"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@fabrix/fabrix/dist/common");
const transformer_1 = require("./transformer");
class SequelizeResolver extends common_1.FabrixResolver {
    constructor(model, datastore) {
        super(model);
        if (!model) {
            throw new RangeError('Resolver must be given a Model to bind to');
        }
        this._sequelize = datastore;
    }
    get connection() {
        return this._connection;
    }
    set connection(connection) {
        this._connection = connection;
    }
    get sequelizeModel() {
        return this._sequelizeModel;
    }
    get dataStoreModel() {
        return this._sequelizeModel;
    }
    get sequelize() {
        return this._sequelize;
    }
    get datastore() {
        return this._sequelize;
    }
    get instance() {
        return this._sequelizeModel;
    }
    connect(modelName, schema, options) {
        this._sequelizeModel = this._connection.define(modelName, schema, options);
        this._sequelizeModel.app = this.app;
        this._sequelize = this._sequelizeModel.sequelize;
        this.model.datastore = this.model['sequelize'] = this.datastore;
        const instanceMethods = transformer_1.Transformer.getModelPrototypes(this.model);
        const classMethods = transformer_1.Transformer.getModelMethods(this.model, instanceMethods);
        Object.keys(classMethods).forEach(c => {
            this._sequelizeModel[c] = classMethods[c];
        });
        Object.keys(instanceMethods).forEach(i => {
            this._sequelizeModel.prototype[i] = instanceMethods[i];
        });
        this._sequelizeModel.prototype.app = this.app;
        this._connection.models[modelName] = this._sequelizeModel;
        const resolverMethods = transformer_1.Transformer.getClassMethods(this);
        Object.entries(resolverMethods).forEach(([_, method]) => {
            this.model[method] = this[method].bind(this);
        });
    }
    get associations() {
        if (this._sequelizeModel) {
            return this._sequelizeModel.associations;
        }
    }
    addScope(name, scope, options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.addScope(name, scope, options);
        }
    }
    aggregate(filed, aggregateFunction, options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.aggregate(filed, aggregateFunction, options);
        }
    }
    belongsTo(target, options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.belongsTo(target, options);
        }
    }
    belongsToMany(target, options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.belongsToMany(target, options);
        }
    }
    build(dataValues, options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.build(dataValues, options);
        }
    }
    bulkCreate(records, options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.bulkCreate(records, options);
        }
    }
    count(criteria, options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.count(criteria, options);
        }
    }
    create(values, options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.create(values, options);
        }
    }
    decrement(fields, options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.decrement(fields, options);
        }
    }
    describe(schema, options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.describe(schema, options);
        }
    }
    delete(options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.destroy(options);
        }
    }
    destroy(options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.destroy(options);
        }
    }
    drop(options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.drop(options);
        }
    }
    findAll(options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.findAll(options);
        }
    }
    findAndCountAll(options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.findAndCountAll(options);
        }
    }
    findById(id, options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.findById(id, options);
        }
    }
    findOne(criteria) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.findOne(criteria);
        }
    }
    findOrBuild(criteria) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.findOrBuild(criteria);
        }
    }
    findOrCreate(criteria) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.findOrCreate(criteria);
        }
    }
    getTableName() {
        if (this._sequelizeModel) {
            return this._sequelizeModel.getTableName();
        }
    }
    hasMany(arget, options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.hasMany(arget, options);
        }
    }
    hasOne(target, options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.hasOne(target, options);
        }
    }
    increment(fields, options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.increment(fields, options);
        }
    }
    init(attributes, options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.init(attributes, options);
        }
    }
    max(criteria, options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.max(criteria, options);
        }
    }
    min(criteria, options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.min(criteria, options);
        }
    }
    removeAttribute(attribute) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.removeAttribute(attribute);
        }
    }
    restore(options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.restore(options);
        }
    }
    scope(options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.scope(options);
        }
    }
    sum(riteria, options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.sum(riteria, options);
        }
    }
    sync(options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.sync(options);
        }
    }
    truncate(options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.truncate(options);
        }
    }
    unscoped() {
        if (this._sequelizeModel) {
            return this._sequelizeModel.unscoped();
        }
    }
    save(values, options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.update(values, options);
        }
    }
    update(values, options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.update(values, options);
        }
    }
    upsert(values, options = {}) {
        if (this._sequelizeModel) {
            return this._sequelizeModel.upsert(values, options);
        }
    }
}
exports.SequelizeResolver = SequelizeResolver;
