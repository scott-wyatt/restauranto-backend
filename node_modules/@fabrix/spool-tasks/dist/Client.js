"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@fabrix/fabrix/dist/common");
const uuid = require("uuid");
class Client extends common_1.FabrixGeneric {
    constructor(app, messenger, exchangeName) {
        super(app);
        this.messenger = messenger;
        this.exchange_name = exchangeName;
        this.active_tasks = new Map();
    }
    publish(routingKey, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const taskId = uuid.v1();
            data.taskId = taskId;
            return this.messenger.publish(this.exchange_name, routingKey, data)
                .then(() => {
                return taskId;
            });
        });
    }
    cancel(typeName, taskId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.app.log.info('cancelling type', typeName, taskId, this.exchange_name);
            return this.messenger.publish(this.exchange_name, `${typeName}.interrupt`, { taskId })
                .then((result) => {
                return result;
            })
                .catch(err => {
                this.app.log.error(err);
                return err;
            });
        });
    }
}
exports.Client = Client;
