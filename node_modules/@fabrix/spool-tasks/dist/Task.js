"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@fabrix/fabrix/dist/common");
class Task extends common_1.FabrixGeneric {
    constructor(app, message) {
        super(app);
        this.message = message || { body: { taskId: null } };
        this.id = this.message.body.taskId;
        this.isAcknowledged = false;
    }
    get id() {
        return this._id;
    }
    set id(id) {
        this._id = id;
    }
    get name() {
        return this.constructor.name;
    }
    ack() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isAcknowledged) {
                this.isAcknowledged = true;
                return this.message.ack();
            }
            else {
                this.app.log.warn(`${this.name} attempting to ack a message that already responded`);
            }
        });
    }
    nack() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isAcknowledged) {
                this.isAcknowledged = true;
                return this.message.nack();
            }
            else {
                this.app.log.warn(`${this.name} attempting to nack a message that already responded`);
            }
        });
    }
    reject() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isAcknowledged) {
                this.isAcknowledged = true;
                return this.message.reject();
            }
            else {
                this.app.log.warn(`${this.name} attempting to reject a message that already responded`);
            }
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Subclasses must override Task.run');
        });
    }
    interrupt(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            this.app.log.debug(`${this.name} Interrupt:`, msg);
        });
    }
    finalize(results) {
        return __awaiter(this, void 0, void 0, function* () {
            this.app.log.debug(`${this.name} Finalize:`, results);
        });
    }
}
exports.Task = Task;
