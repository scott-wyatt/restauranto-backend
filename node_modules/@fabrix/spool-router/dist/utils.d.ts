import { FabrixApp } from '@fabrix/fabrix';
import { FabrixController, FabrixGeneric } from '@fabrix/fabrix/dist/common';
import { FabrixPolicy } from '@fabrix/fabrix/dist/common';
import { IRoute } from './interfaces/IRoute';
export declare const Utils: {
    methods: string[];
    stringToArray(strOrArray: any): string[];
    splitRoute(app: FabrixApp, path: string, rawRoute: IRoute): {
        path: string;
        route: any;
    }[];
    buildRoute(app: FabrixApp, path: string, rawRoute: IRoute): {
        path: string;
        route: any;
    }[];
    getRouteLevelPrefix(app: FabrixApp, route: any): string;
    getPrefix(app: FabrixApp, route: any): string;
    getPathFromRoute(app: FabrixApp, path: any, route: any): string;
    getPolicyFromString(app: FabrixApp, handler: any): FabrixGeneric | FabrixPolicy;
    getControllerPolicy(app: FabrixApp, handler: any, routeMethod: any, pre?: any[]): FabrixPolicy[];
    getPolicyFromPrerequisite(app: FabrixApp, pre: any): any;
    getControllerFromString(app: FabrixApp, handler: any): FabrixGeneric | FabrixController;
    getControllerFromHandler(handler: any): string;
    getHandlerFromString(app: FabrixApp, route: any): void;
    buildRoutes(app: FabrixApp, routes: any, toReturn?: {}): Map<any, any>;
    sortRoutes(routes: any, order: any): Map<any, any>;
    createSpecificityComparator: (options: any) => (routeA: any, routeB: any) => 0 | 1 | -1;
    freeVariableWeight: (sliced: any) => number;
    optionalParts: (sliced: any) => number;
};
