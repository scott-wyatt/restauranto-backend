"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const system_1 = require("@fabrix/fabrix/dist/common/spools/system");
const utils_1 = require("./utils");
const validator_1 = require("./validator");
const config = require("./config/index");
const pkg = require("../package.json");
class RouterSpool extends system_1.SystemSpool {
    constructor(app) {
        super(app, {
            config: config,
            pkg: pkg,
            api: {},
        });
        this.extensions = {
            routes: {
                get: () => {
                    return this.routes;
                },
                set: (newRoutes) => {
                    this._routes = newRoutes;
                },
                enumerable: true,
                configurable: true
            }
        };
        return this;
    }
    validate() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.app.config.get('router')) {
                this.app.log.warn('Missing config.router, a default empty configuration will be used');
            }
            if (!this.app.config.get('routes')) {
                this.app.log.warn('Missing config.routes, a default empty Array will be used');
            }
            return Promise.all([
                validator_1.Validator.validateRouter(this.app.config.get('router')),
                Promise.all(Object.values(this.app.config.get('routes') || {}).map(validator_1.Validator.validateRoute)),
                Promise.all(Object.values(this.app.config.get('policies') || {}).map(validator_1.Validator.validatePolicy))
            ]);
        });
    }
    get routes() {
        return this._routes;
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            const routes = this.app.config.get('routes') || {};
            this._routes = utils_1.Utils.buildRoutes(this.app, routes);
        });
    }
    sanity() {
        if (!(this.app.routes instanceof Map)) {
            throw new Error('Sanity Failed: app.routes is not a Map!');
        }
    }
}
exports.RouterSpool = RouterSpool;
