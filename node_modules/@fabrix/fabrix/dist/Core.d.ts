import { FabrixApp } from './';
import { ApiNotDefinedError, ConfigNotDefinedError, ConfigValueError, GraphCompletenessError, IllegalAccessError, NamespaceConflictError, PackageNotDefinedError, TimeoutError, SanityError, SpoolError, ValidationError } from './errors';
import { FabrixService } from './common/Service';
import { FabrixController } from './common/Controller';
import { FabrixPolicy } from './common/Policy';
import { FabrixModel } from './common/Model';
import { FabrixResolver } from './common/Resolver';
import { Spool } from './common';
declare global  {
    namespace NodeJS {
        interface Global {
            [key: string]: any;
        }
    }
}
export declare const Errors: {
    ApiNotDefinedError: typeof ApiNotDefinedError;
    ConfigNotDefinedError: typeof ConfigNotDefinedError;
    ConfigValueError: typeof ConfigValueError;
    GraphCompletenessError: typeof GraphCompletenessError;
    IllegalAccessError: typeof IllegalAccessError;
    NamespaceConflictError: typeof NamespaceConflictError;
    PackageNotDefinedError: typeof PackageNotDefinedError;
    TimeoutError: typeof TimeoutError;
    SanityError: typeof SanityError;
    SpoolError: typeof SpoolError;
    ValidationError: typeof ValidationError;
};
export declare const Core: {
    BreakException: {};
    reservedMethods: string[];
    globals: Readonly<{
        Service: typeof FabrixService;
        Controller: typeof FabrixController;
        Policy: typeof FabrixPolicy;
        Model: typeof FabrixModel;
        Resolver: typeof FabrixResolver;
    } & {
        ApiNotDefinedError: typeof ApiNotDefinedError;
        ConfigNotDefinedError: typeof ConfigNotDefinedError;
        ConfigValueError: typeof ConfigValueError;
        GraphCompletenessError: typeof GraphCompletenessError;
        IllegalAccessError: typeof IllegalAccessError;
        NamespaceConflictError: typeof NamespaceConflictError;
        PackageNotDefinedError: typeof PackageNotDefinedError;
        TimeoutError: typeof TimeoutError;
        SanityError: typeof SanityError;
        SpoolError: typeof SpoolError;
        ValidationError: typeof ValidationError;
    }>;
    globalPropertyOptions: Readonly<{
        writable: boolean;
        enumerable: boolean;
        configurable: boolean;
    }>;
    assignGlobals(): void;
    bindMethods(app: FabrixApp, resource: string): any;
    bindResourceMethods(app: FabrixApp, resources: string[]): void;
    getClassMethods(obj: any): string[];
    getPropertyNames(obj: any): string[];
    hasPrototypeProperty(obj: any, proto: any): any;
    mergePrototype(obj: any, next: any, proto: any): void;
    mergeApi(app: FabrixApp): void;
    mergeApiResource(app: FabrixApp, spool: Spool, resource: string): void;
    mergeApiResourceMethod(app: FabrixApp, spool: Spool, resource: string, method: string): void;
    mergeSpoolApi(app: FabrixApp, spool: Spool): void;
    mergeSpoolApiResource(app: FabrixApp, spool: Spool, next: Spool, resource: string): void;
    mergeSpoolApiResourceMethod(app: FabrixApp, spool: Spool, next: Spool, resource: string, method: string): void;
    mergeExtensions(app: FabrixApp, spool: Spool): void;
    defaultsDeep: (...args: any[]) => {};
    collector: (stack: any, key: any, val: any) => any;
    isNotCircular: (obj: any) => boolean;
    createDefaultPaths(app: FabrixApp): Promise<void>;
    bindApplicationListeners(app: FabrixApp): void;
    bindSpoolPhaseListeners(app: FabrixApp, spools: Spool[]): void;
    bindSpoolMethodListeners(app: FabrixApp, spool: Spool): void;
    handlePromiseRejection(err: Error): void;
};
