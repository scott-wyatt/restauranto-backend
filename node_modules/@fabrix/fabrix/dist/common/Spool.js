"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const lodash_1 = require("lodash");
const Generic_1 = require("./Generic");
class Spool extends Generic_1.FabrixGeneric {
    constructor(app, { pkg = null, config = {}, api = {} }) {
        super(app);
        this._stage = 'pre';
        this._spoolConfigKeys = ['lifecycle', 'spool', 'trailpack'];
        if (!(app instanceof events_1.EventEmitter)) {
            throw new Error('The "app" argument must be of type EventEmitter');
        }
        if (!pkg) {
            throw new Error('Spool is missing package definition ("spool.pkg")');
        }
        this._pkg = Object.freeze(pkg);
        this._api = api;
        this._config = lodash_1.omit(config, this._spoolConfigKeys);
        this._lifecycle = Spool.configuredSpoolLifecycle(config);
        this.app.emit(`spool:${this.name}:constructed`, this);
    }
    static get configAction() {
        return 'merge';
    }
    static get type() {
        return 'misc';
    }
    static get defaultLifecycle() {
        return {
            configure: {
                listen: [],
                emit: []
            },
            initialize: {
                listen: [],
                emit: []
            },
            sanity: {
                listen: [],
                emit: []
            }
        };
    }
    static configuredSpoolLifecycle(config) {
        const level1 = config.lifecycle || {};
        const level2 = config.spool && config.spool.lifecycle
            ? config.spool.lifecycle : config.trailpack && config.trailpack.lifecycle
            ? config.trailpack.lifecycle : {};
        const level3 = Spool.defaultLifecycle;
        return lodash_1.defaultsDeep({}, level1, level2, level3);
    }
    set stage(val) {
        this._stage = val;
    }
    get stage() {
        return this._stage;
    }
    get api() {
        return this._api;
    }
    set api(api) {
        this._api = api;
    }
    get config() {
        return this._config;
    }
    set config(config) {
        this._config = config;
    }
    get pkg() {
        return this._pkg;
    }
    get log() {
        return this.app.log;
    }
    validate() {
    }
    configure() {
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    sanity() {
    }
    unload() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    get name() {
        return this.pkg.name
            ? this.pkg.name.replace(/(^@fabrix\/)?spool\-|trailpack\-/, '')
            : this.constructor.name.toLowerCase().replace(/Spool$/, '');
    }
    get lifecycle() {
        return this._lifecycle;
    }
}
exports.Spool = Spool;
