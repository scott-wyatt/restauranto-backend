import { IApi, ISpoolConfig, ILifecycle } from './index';
import { FabrixApp } from '../index';
import { FabrixGeneric } from './Generic';
export interface Spool {
    [key: string]: any;
}
export declare class Spool extends FabrixGeneric {
    app: FabrixApp;
    private _stage;
    private _config;
    private _pkg;
    private _api;
    private _lifecycle;
    private _spoolConfigKeys;
    static readonly configAction: string;
    static readonly type: string;
    static readonly defaultLifecycle: ILifecycle;
    static configuredSpoolLifecycle(config: any): any;
    constructor(app: FabrixApp, {pkg, config, api}: {
        pkg?: any;
        config?: ISpoolConfig;
        api?: IApi;
    });
    stage: string;
    api: IApi;
    config: ISpoolConfig;
    readonly pkg: any;
    readonly log: FabrixApp['log'];
    validate(): any;
    configure(): any;
    initialize(): Promise<any>;
    sanity(): any;
    unload(): Promise<any>;
    readonly name: string;
    readonly lifecycle: ILifecycle;
}
