/// <reference types="node" />
import { EventEmitter } from 'events';
import { Configuration } from './Configuration';
import { LoggerProxy } from './LoggerProxy';
import { Spool, IApi, IPkg, IConfig, IEnv } from './common';
import { FabrixController } from './common/Controller';
import { FabrixService } from './common/Service';
import { FabrixPolicy } from './common/Policy';
import { FabrixModel } from './common/Model';
import { FabrixResolver } from './common/Resolver';
import { ServerSpool } from './common/spools/server';
import { ExtensionSpool } from './common/spools/extension';
import { DatastoreSpool } from './common/spools/datastore';
import { SystemSpool } from './common/spools/system';
import { ToolSpool } from './common/spools/tool';
import { MiscSpool } from './common/spools/misc';
export interface FabrixApp {
    [key: string]: any;
}
export declare class FabrixApp extends EventEmitter {
    private _logger;
    private _env;
    private _pkg;
    private _config;
    private _versions;
    private _api;
    private _fabrix;
    private _spools;
    private _resources;
    controllers: {
        [key: string]: FabrixController;
    };
    services: {
        [key: string]: FabrixService;
    };
    policies: {
        [key: string]: FabrixPolicy;
    };
    models: {
        [key: string]: FabrixModel;
    };
    resolvers: {
        [key: string]: FabrixResolver;
    };
    constructor(app: {
        pkg: IPkg;
        api: IApi;
        config: IConfig;
    });
    readonly logger: LoggerProxy;
    readonly env: IEnv;
    readonly pkg: any;
    readonly versions: {
        [key: string]: any;
    };
    readonly config: Configuration;
    readonly fabrix: any;
    readonly spools: {
        [key: string]: Spool | ServerSpool | ExtensionSpool | DatastoreSpool | SystemSpool | ToolSpool | MiscSpool;
    };
    readonly api: IApi;
    readonly log: LoggerProxy;
    resources: string[];
    start(): Promise<any>;
    stop(error?: any): Promise<any>;
    onceAny(events: any): Promise<any>;
    after(events: any): Promise<any>;
}
