'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var PREFIX = 'sequelize-stream';
var EVENTS = {
  CREATE: 'create',
  UPDATE: 'update',
  DESTROY: 'destroy'
  // unsupported, just here so we can provide a test case and be alerted if
  // sequelize fixes this in the future.
  , BULK_DESTROY: 'bulk destroy'
};

exports.default = function (_ref) {
  var sequelize = _ref.sequelize,
      stream = _ref.stream;

  sequelize.addHook('afterCreate', PREFIX + '-afterCreate', function (instance) {
    stream.push({ event: EVENTS.CREATE, instance: instance });
  });

  sequelize.addHook('afterBulkCreate', PREFIX + '-afterBulkCreate', function (instances) {
    instances.forEach(function (instance) {
      stream.push({ event: EVENTS.CREATE, instance: instance });
    });
  });

  sequelize.addHook('afterUpdate', PREFIX + '-afterUpdate', function (instance) {
    stream.push({ event: EVENTS.UPDATE, instance: instance });
  });

  sequelize.addHook('afterBulkUpdate', PREFIX + '-afterBulkUpdate', function (_ref2) {
    var model = _ref2.model,
        attributes = _ref2.attributes;

    // this is a hacky way to get the updated rows
    var updatedAt = attributes.updatedAt;

    return model.findAll({ where: { updatedAt: updatedAt } }).then(function (instances) {
      instances.forEach(function (instance) {
        stream.push({ event: EVENTS.UPDATE, instance: instance });
      });
    });
  });

  sequelize.addHook('afterDestroy', PREFIX + '-afterDestroy', function (instance) {
    stream.push({ event: EVENTS.DESTROY, instance: instance });
  });

  // sequelize doesn't pass the instances to us, so all we can do is emit a
  // destroy event
  sequelize.addHook('afterBulkDestroy', PREFIX + '-afterBulkDestroy', function () {
    stream.push({ event: EVENTS.BULK_DESTROY });
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hZGQtaG9va3MuanMiXSwibmFtZXMiOlsiUFJFRklYIiwiRVZFTlRTIiwiQ1JFQVRFIiwiVVBEQVRFIiwiREVTVFJPWSIsIkJVTEtfREVTVFJPWSIsInNlcXVlbGl6ZSIsInN0cmVhbSIsImFkZEhvb2siLCJpbnN0YW5jZSIsInB1c2giLCJldmVudCIsImluc3RhbmNlcyIsImZvckVhY2giLCJtb2RlbCIsImF0dHJpYnV0ZXMiLCJ1cGRhdGVkQXQiLCJmaW5kQWxsIiwid2hlcmUiLCJ0aGVuIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQU1BLFNBQVMsa0JBQWY7QUFDQSxJQUFNQyxTQUFTO0FBQ2JDLFVBQVEsUUFESztBQUVYQyxVQUFRLFFBRkc7QUFHWEMsV0FBUztBQUNYO0FBQ0E7QUFMYSxJQU1YQyxjQUFjO0FBTkgsQ0FBZjs7a0JBU2UsZ0JBQXlCO0FBQUEsTUFBdkJDLFNBQXVCLFFBQXZCQSxTQUF1QjtBQUFBLE1BQVpDLE1BQVksUUFBWkEsTUFBWTs7QUFDdENELFlBQVVFLE9BQVYsQ0FBa0IsYUFBbEIsRUFBb0NSLE1BQXBDLG1CQUEwRCxVQUFDUyxRQUFELEVBQWM7QUFDdEVGLFdBQU9HLElBQVAsQ0FBWSxFQUFDQyxPQUFPVixPQUFPQyxNQUFmLEVBQXVCTyxrQkFBdkIsRUFBWjtBQUNELEdBRkQ7O0FBSUFILFlBQVVFLE9BQVYsQ0FBa0IsaUJBQWxCLEVBQXdDUixNQUF4Qyx1QkFBa0UsVUFBQ1ksU0FBRCxFQUFlO0FBQy9FQSxjQUFVQyxPQUFWLENBQWtCLFVBQUNKLFFBQUQsRUFBYztBQUM5QkYsYUFBT0csSUFBUCxDQUFZLEVBQUNDLE9BQU9WLE9BQU9DLE1BQWYsRUFBdUJPLGtCQUF2QixFQUFaO0FBQ0QsS0FGRDtBQUdELEdBSkQ7O0FBTUFILFlBQVVFLE9BQVYsQ0FBa0IsYUFBbEIsRUFBb0NSLE1BQXBDLG1CQUEwRCxVQUFDUyxRQUFELEVBQWM7QUFDdEVGLFdBQU9HLElBQVAsQ0FBWSxFQUFDQyxPQUFPVixPQUFPRSxNQUFmLEVBQXVCTSxrQkFBdkIsRUFBWjtBQUNELEdBRkQ7O0FBSUFILFlBQVVFLE9BQVYsQ0FBa0IsaUJBQWxCLEVBQXdDUixNQUF4Qyx1QkFBa0UsaUJBQXlCO0FBQUEsUUFBdkJjLEtBQXVCLFNBQXZCQSxLQUF1QjtBQUFBLFFBQWhCQyxVQUFnQixTQUFoQkEsVUFBZ0I7O0FBQ3pGO0FBRHlGLFFBRWxGQyxTQUZrRixHQUVyRUQsVUFGcUUsQ0FFbEZDLFNBRmtGOztBQUd6RixXQUFPRixNQUFNRyxPQUFOLENBQWMsRUFBQ0MsT0FBTyxFQUFDRixvQkFBRCxFQUFSLEVBQWQsRUFDTkcsSUFETSxDQUNELFVBQUNQLFNBQUQsRUFBZTtBQUNuQkEsZ0JBQVVDLE9BQVYsQ0FBa0IsVUFBQ0osUUFBRCxFQUFjO0FBQzlCRixlQUFPRyxJQUFQLENBQVksRUFBQ0MsT0FBT1YsT0FBT0UsTUFBZixFQUF1Qk0sa0JBQXZCLEVBQVo7QUFDRCxPQUZEO0FBR0QsS0FMTSxDQUFQO0FBTUQsR0FURDs7QUFXQUgsWUFBVUUsT0FBVixDQUFrQixjQUFsQixFQUFxQ1IsTUFBckMsb0JBQTRELFVBQUNTLFFBQUQsRUFBYztBQUN4RUYsV0FBT0csSUFBUCxDQUFZLEVBQUNDLE9BQU9WLE9BQU9HLE9BQWYsRUFBd0JLLGtCQUF4QixFQUFaO0FBQ0QsR0FGRDs7QUFJQTtBQUNBO0FBQ0FILFlBQVVFLE9BQVYsQ0FBa0Isa0JBQWxCLEVBQXlDUixNQUF6Qyx3QkFBb0UsWUFBTTtBQUN4RU8sV0FBT0csSUFBUCxDQUFZLEVBQUNDLE9BQU9WLE9BQU9JLFlBQWYsRUFBWjtBQUNELEdBRkQ7QUFHRCxDIiwiZmlsZSI6ImFkZC1ob29rcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFBSRUZJWCA9ICdzZXF1ZWxpemUtc3RyZWFtJ1xuY29uc3QgRVZFTlRTID0ge1xuICBDUkVBVEU6ICdjcmVhdGUnXG4gICwgVVBEQVRFOiAndXBkYXRlJ1xuICAsIERFU1RST1k6ICdkZXN0cm95J1xuICAvLyB1bnN1cHBvcnRlZCwganVzdCBoZXJlIHNvIHdlIGNhbiBwcm92aWRlIGEgdGVzdCBjYXNlIGFuZCBiZSBhbGVydGVkIGlmXG4gIC8vIHNlcXVlbGl6ZSBmaXhlcyB0aGlzIGluIHRoZSBmdXR1cmUuXG4gICwgQlVMS19ERVNUUk9ZOiAnYnVsayBkZXN0cm95J1xufVxuXG5leHBvcnQgZGVmYXVsdCAoe3NlcXVlbGl6ZSwgc3RyZWFtfSkgPT4ge1xuICBzZXF1ZWxpemUuYWRkSG9vaygnYWZ0ZXJDcmVhdGUnLCBgJHtQUkVGSVh9LWFmdGVyQ3JlYXRlYCwgKGluc3RhbmNlKSA9PiB7XG4gICAgc3RyZWFtLnB1c2goe2V2ZW50OiBFVkVOVFMuQ1JFQVRFLCBpbnN0YW5jZX0pXG4gIH0pXG5cbiAgc2VxdWVsaXplLmFkZEhvb2soJ2FmdGVyQnVsa0NyZWF0ZScsIGAke1BSRUZJWH0tYWZ0ZXJCdWxrQ3JlYXRlYCwgKGluc3RhbmNlcykgPT4ge1xuICAgIGluc3RhbmNlcy5mb3JFYWNoKChpbnN0YW5jZSkgPT4ge1xuICAgICAgc3RyZWFtLnB1c2goe2V2ZW50OiBFVkVOVFMuQ1JFQVRFLCBpbnN0YW5jZX0pXG4gICAgfSlcbiAgfSlcblxuICBzZXF1ZWxpemUuYWRkSG9vaygnYWZ0ZXJVcGRhdGUnLCBgJHtQUkVGSVh9LWFmdGVyVXBkYXRlYCwgKGluc3RhbmNlKSA9PiB7XG4gICAgc3RyZWFtLnB1c2goe2V2ZW50OiBFVkVOVFMuVVBEQVRFLCBpbnN0YW5jZX0pXG4gIH0pXG5cbiAgc2VxdWVsaXplLmFkZEhvb2soJ2FmdGVyQnVsa1VwZGF0ZScsIGAke1BSRUZJWH0tYWZ0ZXJCdWxrVXBkYXRlYCwgKHttb2RlbCwgYXR0cmlidXRlc30pID0+IHtcbiAgICAvLyB0aGlzIGlzIGEgaGFja3kgd2F5IHRvIGdldCB0aGUgdXBkYXRlZCByb3dzXG4gICAgY29uc3Qge3VwZGF0ZWRBdH0gPSBhdHRyaWJ1dGVzXG4gICAgcmV0dXJuIG1vZGVsLmZpbmRBbGwoe3doZXJlOiB7dXBkYXRlZEF0fX0pXG4gICAgLnRoZW4oKGluc3RhbmNlcykgPT4ge1xuICAgICAgaW5zdGFuY2VzLmZvckVhY2goKGluc3RhbmNlKSA9PiB7XG4gICAgICAgIHN0cmVhbS5wdXNoKHtldmVudDogRVZFTlRTLlVQREFURSwgaW5zdGFuY2V9KVxuICAgICAgfSlcbiAgICB9KVxuICB9KVxuXG4gIHNlcXVlbGl6ZS5hZGRIb29rKCdhZnRlckRlc3Ryb3knLCBgJHtQUkVGSVh9LWFmdGVyRGVzdHJveWAsIChpbnN0YW5jZSkgPT4ge1xuICAgIHN0cmVhbS5wdXNoKHtldmVudDogRVZFTlRTLkRFU1RST1ksIGluc3RhbmNlfSlcbiAgfSlcblxuICAvLyBzZXF1ZWxpemUgZG9lc24ndCBwYXNzIHRoZSBpbnN0YW5jZXMgdG8gdXMsIHNvIGFsbCB3ZSBjYW4gZG8gaXMgZW1pdCBhXG4gIC8vIGRlc3Ryb3kgZXZlbnRcbiAgc2VxdWVsaXplLmFkZEhvb2soJ2FmdGVyQnVsa0Rlc3Ryb3knLCBgJHtQUkVGSVh9LWFmdGVyQnVsa0Rlc3Ryb3lgLCAoKSA9PiB7XG4gICAgc3RyZWFtLnB1c2goe2V2ZW50OiBFVkVOVFMuQlVMS19ERVNUUk9ZfSlcbiAgfSlcbn1cbiJdfQ==