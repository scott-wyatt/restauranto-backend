var colors = require("colors");

function getTextWidth(text) {
    var width = text.length;
    for(i in text) {
        if(text.charCodeAt(i)>=0x1100) {
            width++;
        }
    }
    return width;
}

function nothing(text) {
    return text;
}

var allColors = [
nothing
,colors.blue
,colors.red
,colors.cyan
,colors.magenta
,colors.green
,colors.yellow
,colors.white
,colors.gray
,colors.grey
,colors.black
];

function bigTree(obj,withNumber, prefix, colorMode, depth) {
    if (prefix===undefined) {prefix=""};
    withNumber= (withNumber===undefined)? false:withNumber;
    depth = depth || 0;

    var showColor = colorMode?colorMode.showColor:false;
    var lineColorN = colorMode?parseInt(colorMode.lineColor):0;
    lineColorN = (lineColorN>=0)?lineColorN:0;

    var theme = (colorMode && colorMode.theme)?colorMode.theme:[1,2];

    var currentColor = nothing, 
        nextColor = nothing,
        lineColor = nothing,
        nextLineColor = nothing;

    if (showColor) {
        var len = theme.length;
        var clen = allColors.length;
        currentColor = allColors[theme[depth%len]%clen];
        nextColor = allColors[theme[(depth+1)%len]%clen];

        //lineColor = lineColorN>0?myColors[(lineColorN-1)%len]:currentColor;
        // lineColor = lineColorN>0?colors.white:currentColor;
        // nextLineColor = lineColorN>0?lineColor:nextColor;
        nextLineColor = lineColor = allColors[lineColorN%clen];
    }

//    currentColor=nothing;
  //  nextColor = nothing;

    var chr = function (s, n) {
        var chars = {
            '│' : '|',
            '└' : '`',
            '├' : '+',
            '─' : '-',
            '┬' : '-'
        };
        if (n===undefined) {
          return s;  
        } else {
          var ret="";
          for (var i = 0; i < n; i++) {
              ret+=s;
          };
          return ret;
        }
    };
    if (typeof obj === 'string') obj = { label : obj };

    var label = (withNumber?obj.number+".":"")+ (obj.label || '');
    var nodes = obj.nodes || [];
    var fold = (obj.fold || 0)==1;

    if (fold) return currentColor(label+" +");

    return currentColor(label)+nextLineColor(nodes.length>0?chr('─',1):"")
            + nodes.map(function(node, i) {
                var first = i === 0; 
                var last = i === nodes.length - 1;
                var more = node.nodes && node.nodes.length; 

                var prefix2 = prefix+chr(' ', getTextWidth(label)+1);
                var prefix3 = prefix2+(last?chr(' ',3):nextLineColor(chr('│  ')));

                var ret= "";
                if (first) {
                    if (last) { ret+=chr('─',1); }
                    else { ret+=chr("┬"); }
                } else {
                    if (last) { ret+=chr("└"); }
                    else { ret+=chr("├"); }
                }

                ret = (first?"":prefix2)+nextLineColor(ret+chr("─",2))+ bigTree(node,withNumber,prefix3, colorMode, depth+1);

                return ret;

            }).join("\n");

}

module.exports = bigTree;